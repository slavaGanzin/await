#!/usr/bin/env bash

echo """# await
$(du -h await | sed -E 's/\s?(.*)\s.*/\1/'), small memory footprint, single binary that run list of commands in parallel and waits for their termination

<!-- DO NOT CHANGE THIS FILE IS GENERATED BY ./hooks/pre-commit -->

# ![build](https://github.com/slavaGanzin/await/actions/workflows/build-and-release.yml/badge.svg)


### install
\`\`\`bash
# recommended way (crossplatform)
stew i slavaGanzin/await  # https://github.com/marwanhawari/stew
# or
eget slavaGanzin/await --to /usr/local/bin/  # https://github.com/zyedidia/eget

# nix
nix-shell -p await

# arch
yay -S await

# not recommended, but it works!
curl https://i.jpillora.com/slavaGanzin/await! | bash
\`\`\`

### completions
It's a single binary distribution, so you need to do it yourself (or download from a release)
\`\`\`bash
# bash
await --autocomplete-bash >> ~/.bashrc

#zsh
await --autocomplete-zsh >> ~/.zshrc

#fish
await --autocomplete-fish >> ~/.config/fish/completions/await.fish
\`\`\`

# With await you can:
### Take action on specific file type changes
\`\`\`bash
await 'stat **.c' --change --forever --exec 'gcc *.c -o await -lpthread'
# you can filter with:
\`stat --format '%n %z' **; | grep -v node_modules\`
\`\`\`

<img src='demo/7.gif' width='100%'></img>


### Wait for FAANG to fail
\`\`\`bash
await 'whois facebook.com' \\
      'nslookup apple.com' \\
      'dig +short amazon.com' \\
      'sleep 1 | telnet netflix.com 443 2>/dev/null' \\
      'http google.com' --fail
\`\`\`

<img src='demo/1.gif' width='100%'></img>


### Notify yourself when your site down
\`\`\`bash
await \"curl 'https://whatnot.ai' &>/dev/null && echo UP || echo DOWN\" \\
      --forever --change --exec \"ntfy send 'whatnot.ai \1'\"
\`\`\`

<img src='demo/2.gif' width='100%'></img>


### Use as [concurrently](https://github.com/kimmobrunfeldt/concurrently)
\`\`\`bash
await \"stylus --watch --compress --out /home/vganzin/work/whatnot/front /home/vganzin/work/whatnot/front/index.styl\" \\
      \"pug /home/vganzin/work/whatnot/front/index.pug --out /home/vganzin/work/whatnot/front --watch --pretty 2>/dev/null\" --forever --stdout --silent
\`\`\`

<img src='demo/3.gif' width='100%'></img>


### [Substitute while substituting](https://memegenerator.net/img/instances/48173775.jpg)
\`\`\`bash
await 'echo -n 10' 'echo -n \$RANDOM' 'expr \1 + \2' --exec 'echo \3' --forever --silent
\`\`\`

<img src='demo/4.gif' width='100%'></img>

### Furiously wait for new iPhone in background process
\`\`\`bash
await 'curl \"https://www.apple.com/iphone/\" -s | pup \".hero-eyebrow text{}\" | grep -v 12' --interval 1000 --change --daemon --exec 'ntfy send \"\1\"'
\`\`\`

<img src='demo/5.gif' width='100%'></img>

### Restart database and connect immediately after it become fully functional
\`\`\`bash
sudo systemctl restart redis; await 'socat -u OPEN:/dev/null UNIX-CONNECT:/tmp/redis.sock' --exec 'redis-cli -s /tmp/redis.sock'
\`\`\`

<img src='demo/6.gif' width='100%'></img>

### Watch command output with diff highlighting
\`\`\`bash
# Like watch -d, highlight only the changing parts
await 'date +%s' --diff --forever --stdout --silent --interval 1000

# Monitor API responses and highlight changes 
await 'curl -s https://api.example.com/status | jq .counter' --diff --forever --stdout --silent

# Watch file changes with visual diff
await 'wc -l *.log' --diff --change --forever --stdout
\`\`\`

### Better stderr handling
\`\`\`bash
# Suppress stderr without affecting pipes or command structure
await 'curl -s https://unreliable-api.com || echo "failed"' --no-stderr

# Clean output even with noisy commands
await 'some-verbose-command' 'another-command' --no-stderr --stdout --silent
\`\`\`

## --help
\`\`\`bash
$(./await --help | sed 's/\x1b\[[0-9;]*m//g')
<!-- DO NOT CHANGE THIS FILE IS GENERATED BY ./hooks/pre-commit -->

\`\`\`
""" > README.md
git add README.md

./build
cp await /usr/local/bin/await
